tests/cases/compiler/unionOfClassCalls.ts(12,9): error TS2684: The 'this' context of type 'Test<A> | Test<B>' is not assignable to method's 'this' of type 'Test<T>'.
  Type 'Test<A>' is not assignable to type 'Test<T>'.
    Type 'A' is not assignable to type 'T'.
      'T' could be instantiated with an arbitrary type which could be unrelated to 'A'.
tests/cases/compiler/unionOfClassCalls.ts(28,5): error TS2349: This expression is not callable.
  Each member of the union type '{ (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number): number; (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue: number): number; <U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: number[]) => U, initialValue: U): U; } | { (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U; }' has signatures, but none of those signatures are compatible with each other.


==== tests/cases/compiler/unionOfClassCalls.ts (2 errors) ====
    // from https://github.com/microsoft/TypeScript/issues/30717
    declare class Test<T> {
        obj: T;
        get<K extends keyof T>(k: K): T[K];
    }
    
    interface A { t: "A" }
    interface B { t: "B" }
    
    declare const tmp: Test<A> | Test<B>;
    
    switch (tmp.get('t')) {
            ~~~
!!! error TS2684: The 'this' context of type 'Test<A> | Test<B>' is not assignable to method's 'this' of type 'Test<T>'.
!!! error TS2684:   Type 'Test<A>' is not assignable to type 'Test<T>'.
!!! error TS2684:     Type 'A' is not assignable to type 'T'.
!!! error TS2684:       'T' could be instantiated with an arbitrary type which could be unrelated to 'A'.
        case 'A': break;
        case 'B': break;
    }
    
    // from https://github.com/microsoft/TypeScript/issues/36390
    
    const arr: number[] | string[] = [];  // Works with Array<number | string>
    const arr1: number[]  = [];
    const arr2:  string[] = [];
    
    arr.map((a: number | string, index: number) => { 
        return index
    })
    
    // This case still doesn't work because `reduce` has multiple overloads :(
    arr.reduce((acc: Array<string>, a: number | string, index: number) => { 
        ~~~~~~
!!! error TS2349: This expression is not callable.
!!! error TS2349:   Each member of the union type '{ (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number): number; (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue: number): number; <U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: number[]) => U, initialValue: U): U; } | { (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U; }' has signatures, but none of those signatures are compatible with each other.
        return []
    }, [])
    
    arr.forEach((a: number | string, index: number) => { 
        return index
    })
    
    arr1.map((a: number, index: number) => { 
        return index
    })
    
    arr1.reduce((acc: number[], a: number, index: number) => { 
        return [a]
    }, [])
    
    arr1.forEach((a: number, index: number) => { 
        return index
    })
    arr2.map((a:  string, index: number) => { 
        return index
    })
    
    arr2.reduce((acc: string[], a: string, index: number) => { 
        return []
    }, [])
    
    arr2.forEach((a: string, index: number) => { 
        return index
    })
    
    // from https://github.com/microsoft/TypeScript/issues/36307
    
    declare class Foo {
        doThing(): Promise<this>
    }
    
    declare class Bar extends Foo {
        bar: number;
    }
    declare class Baz extends Foo {
        baz: number;
    }
    
    declare var a: Bar | Baz;
    // note, you must annotate `result` for now
    a.doThing().then((result: Bar | Baz) => {
    	// whatever
    });
    