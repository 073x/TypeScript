=== tests/cases/compiler/collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts ===
class Foo2 {
>Foo2 : Foo2

    constructor(_this: number) { //Error
>_this : number

        var lambda = () => {
>lambda : () => (x: any) => Foo2
>() => {            return x => this;   // New scope.  So should inject new _this capture        } : () => (x: any) => Foo2

            return x => this;   // New scope.  So should inject new _this capture
>x => this : (x: any) => Foo2
>x : any
>this : Foo2
        }
    }
}

class Foo3 {
>Foo3 : Foo3

    constructor(private _this: number) { // Error
>_this : number

        var lambda = () => {
>lambda : () => (x: any) => Foo3
>() => {            return x => this;   // New scope.  So should inject new _this capture        } : () => (x: any) => Foo3

            return x => this;   // New scope.  So should inject new _this capture
>x => this : (x: any) => Foo3
>x : any
>this : Foo3
        }
    }
}   

class Foo4 {
>Foo4 : Foo4

    constructor(_this: number); // No code gen - no error
>_this : number

    constructor(_this: string); // No code gen - no error
>_this : string

    constructor(_this: any) { // Error
>_this : any

        var lambda = () => {
>lambda : () => (x: any) => Foo4
>() => {            return x => this;   // New scope.  So should inject new _this capture        } : () => (x: any) => Foo4

            return x => this;   // New scope.  So should inject new _this capture
>x => this : (x: any) => Foo4
>x : any
>this : Foo4
        }
    }
}  

class Foo5 {
>Foo5 : Foo5

    constructor(_this: number); // No code gen - no error
>_this : number

    constructor(_this: string); // No code gen - no error
>_this : string

    constructor(private _this: any) { // Error
>_this : any

        var lambda = () => {
>lambda : () => (x: any) => Foo5
>() => {            return x => this;   // New scope.  So should inject new _this capture        } : () => (x: any) => Foo5

            return x => this;   // New scope.  So should inject new _this capture
>x => this : (x: any) => Foo5
>x : any
>this : Foo5
        }
    }
}  
